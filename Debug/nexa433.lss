
nexa433.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000cf4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015e  0080020a  0080020a  00000e92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a4  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c44  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00003d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012eb  00000000  00000000  0000454f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000583a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_10>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_16>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ef       	ldi	r30, 0xF4	; 244
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 36       	cpi	r26, 0x68	; 104
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 83 02 	call	0x506	; 0x506 <main>
  a6:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <promt>:
         }
         bitMask = bitMask << 1;               
      }
   }
   printf("\nTX End");
}
  ae:	86 e1       	ldi	r24, 0x16	; 22
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	9f 93       	push	r25
  b4:	8f 93       	push	r24
  b6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	08 95       	ret

000000c0 <transmitt>:

void transmitt(uint8_t dev, uint8_t on) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
   sw1_ON[3] = dev;
   
   if (on==1)
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	21 f4       	brne	.+8      	; 0xd0 <transmitt+0x10>
      sw1_ON[3] |= 0x8;
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 93 03 01 	sts	0x0103, r24
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <transmitt+0x16>
   else
      sw1_ON[3] &= ~0x8;
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	80 93 03 01 	sts	0x0103, r24
   //printf("%x\n", sw1_ON[3]);
   // Preamble
   PORTA = 0x04;
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	83 e9       	ldi	r24, 0x93	; 147
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <transmitt+0x1e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <transmitt+0x24>
  e4:	00 00       	nop
   _delay_us(220);
   PORTA = 0x00;
  e6:	11 ba       	out	0x11, r1	; 17
  e8:	c7 e2       	ldi	r28, 0x27	; 39
  ea:	d3 e2       	ldi	r29, 0x23	; 35
  ec:	21 97       	sbiw	r28, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <transmitt+0x2c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <transmitt+0x32>
  f2:	00 00       	nop
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	a4 e0       	ldi	r26, 0x04	; 4
  fa:	b1 e0       	ldi	r27, 0x01	; 1
      }
   }
   printf("\nTX End");
}

void transmitt(uint8_t dev, uint8_t on) {
  fc:	78 e0       	ldi	r23, 0x08	; 8
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	51 e0       	ldi	r21, 0x01	; 1
            _delay_us(220);
            PORTA = 0x00;
            _delay_us(300);
         }
         else {
            PORTA = 0x04;
 102:	44 e0       	ldi	r20, 0x04	; 4
 104:	45 c0       	rjmp	.+138    	; 0x190 <transmitt+0xd0>
   _delay_us(3000); // check this value...
   
   for(int i=0; i<4; i++) {
      uint8_t bitMask = 1;
      for(int j=0; j<8; j++) {
         if(sw1_ON[i] & bitMask) { // '1'
 106:	80 81       	ld	r24, Z
 108:	89 23       	and	r24, r25
 10a:	e9 f0       	breq	.+58     	; 0x146 <transmitt+0x86>
            PORTA = 0x04;
 10c:	41 bb       	out	0x11, r20	; 17
 10e:	c3 e9       	ldi	r28, 0x93	; 147
 110:	d2 e0       	ldi	r29, 0x02	; 2
 112:	21 97       	sbiw	r28, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <transmitt+0x52>
 116:	00 c0       	rjmp	.+0      	; 0x118 <transmitt+0x58>
 118:	00 00       	nop
            _delay_us(220);
            PORTA = 0x00;
 11a:	11 ba       	out	0x11, r1	; 17
 11c:	c7 e6       	ldi	r28, 0x67	; 103
 11e:	d0 e1       	ldi	r29, 0x10	; 16
 120:	21 97       	sbiw	r28, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <transmitt+0x60>
 124:	00 c0       	rjmp	.+0      	; 0x126 <transmitt+0x66>
 126:	00 00       	nop
            _delay_us(1400);
            PORTA = 0x04;
 128:	41 bb       	out	0x11, r20	; 17
 12a:	c3 e9       	ldi	r28, 0x93	; 147
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	21 97       	sbiw	r28, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <transmitt+0x6e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <transmitt+0x74>
 134:	00 00       	nop
            _delay_us(220);
            PORTA = 0x00;
 136:	11 ba       	out	0x11, r1	; 17
 138:	c3 e8       	ldi	r28, 0x83	; 131
 13a:	d3 e0       	ldi	r29, 0x03	; 3
 13c:	21 97       	sbiw	r28, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <transmitt+0x7c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <transmitt+0x82>
 142:	00 00       	nop
 144:	1c c0       	rjmp	.+56     	; 0x17e <transmitt+0xbe>
            _delay_us(300);
         }
         else {
            PORTA = 0x04;
 146:	41 bb       	out	0x11, r20	; 17
 148:	c3 e9       	ldi	r28, 0x93	; 147
 14a:	d2 e0       	ldi	r29, 0x02	; 2
 14c:	21 97       	sbiw	r28, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <transmitt+0x8c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <transmitt+0x92>
 152:	00 00       	nop
            _delay_us(220);
            PORTA = 0x00;
 154:	11 ba       	out	0x11, r1	; 17
 156:	c3 e8       	ldi	r28, 0x83	; 131
 158:	d3 e0       	ldi	r29, 0x03	; 3
 15a:	21 97       	sbiw	r28, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <transmitt+0x9a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <transmitt+0xa0>
 160:	00 00       	nop
            _delay_us(300);
            PORTA = 0x04;
 162:	41 bb       	out	0x11, r20	; 17
 164:	c3 e9       	ldi	r28, 0x93	; 147
 166:	d2 e0       	ldi	r29, 0x02	; 2
 168:	21 97       	sbiw	r28, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <transmitt+0xa8>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <transmitt+0xae>
 16e:	00 00       	nop
            _delay_us(220);
            PORTA = 0x00;
 170:	11 ba       	out	0x11, r1	; 17
 172:	c7 e6       	ldi	r28, 0x67	; 103
 174:	d0 e1       	ldi	r29, 0x10	; 16
 176:	21 97       	sbiw	r28, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <transmitt+0xb6>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <transmitt+0xbc>
 17c:	00 00       	nop
            _delay_us(1400);
         }
         bitMask = bitMask << 1;
 17e:	99 0f       	add	r25, r25
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
   PORTA = 0x00;
   _delay_us(3000); // check this value...
   
   for(int i=0; i<4; i++) {
      uint8_t bitMask = 1;
      for(int j=0; j<8; j++) {
 184:	09 f0       	breq	.+2      	; 0x188 <transmitt+0xc8>
 186:	bf cf       	rjmp	.-130    	; 0x106 <transmitt+0x46>
 188:	31 96       	adiw	r30, 0x01	; 1
   PORTA = 0x04;
   _delay_us(220);
   PORTA = 0x00;
   _delay_us(3000); // check this value...
   
   for(int i=0; i<4; i++) {
 18a:	ea 17       	cp	r30, r26
 18c:	fb 07       	cpc	r31, r27
 18e:	21 f0       	breq	.+8      	; 0x198 <transmitt+0xd8>
      }
   }
   printf("\nTX End");
}

void transmitt(uint8_t dev, uint8_t on) {
 190:	27 2f       	mov	r18, r23
 192:	36 2f       	mov	r19, r22
 194:	95 2f       	mov	r25, r21
 196:	b7 cf       	rjmp	.-146    	; 0x106 <transmitt+0x46>
         }
         bitMask = bitMask << 1;
      }
   }
   //printf("\nTX End");
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <executeCmd>:
      }
   }      
}
*/

uint8_t executeCmd(char *termInput, int cmdLength) {
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	7c 01       	movw	r14, r24
 1b0:	04 e0       	ldi	r16, 0x04	; 4
 1b2:	11 e0       	ldi	r17, 0x01	; 1
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
   int i = 0;
   
   // Check if the entered command is part of the command-list for this application.
   for (; i < sizeof(cmdList); i++) {
      if (strncmp(cmdList[i], termInput, strlen(cmdList[i])) == 0) {
 1b8:	f8 01       	movw	r30, r16
 1ba:	81 91       	ld	r24, Z+
 1bc:	91 91       	ld	r25, Z+
 1be:	8f 01       	movw	r16, r30
 1c0:	fc 01       	movw	r30, r24
 1c2:	01 90       	ld	r0, Z+
 1c4:	00 20       	and	r0, r0
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <executeCmd+0x24>
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	af 01       	movw	r20, r30
 1cc:	48 1b       	sub	r20, r24
 1ce:	59 0b       	sbc	r21, r25
 1d0:	b7 01       	movw	r22, r14
 1d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <strncmp>
 1d6:	89 2b       	or	r24, r25
 1d8:	11 f0       	breq	.+4      	; 0x1de <executeCmd+0x40>

uint8_t executeCmd(char *termInput, int cmdLength) {
   int i = 0;
   
   // Check if the entered command is part of the command-list for this application.
   for (; i < sizeof(cmdList); i++) {
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	ed cf       	rjmp	.-38     	; 0x1b8 <executeCmd+0x1a>
         break;
      }
   }

   // Execute the command if part of the command-list. 
   if (i >= sizeof(cmdList)) {
 1de:	c4 30       	cpi	r28, 0x04	; 4
 1e0:	d1 05       	cpc	r29, r1
 1e2:	78 f0       	brcs	.+30     	; 0x202 <executeCmd+0x64>
      printf("\n%s is not recognized", termInput);
 1e4:	ff 92       	push	r15
 1e6:	ef 92       	push	r14
 1e8:	85 e2       	ldi	r24, 0x25	; 37
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	9f 93       	push	r25
 1ee:	8f 93       	push	r24
 1f0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
      promt();
 1f4:	0e 94 57 00 	call	0xae	; 0xae <promt>
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	53 c0       	rjmp	.+166    	; 0x2a8 <executeCmd+0x10a>
   }
   else {
      switch (i) {
 202:	20 97       	sbiw	r28, 0x00	; 0
 204:	21 f0       	breq	.+8      	; 0x20e <executeCmd+0x70>
 206:	c1 30       	cpi	r28, 0x01	; 1
 208:	d1 05       	cpc	r29, r1
 20a:	49 f1       	breq	.+82     	; 0x25e <executeCmd+0xc0>
 20c:	3f c0       	rjmp	.+126    	; 0x28c <executeCmd+0xee>
               else{
                  swData |= uData<<4;
               }
            }
            ***/
            if (termInput[5] == '1') {
 20e:	d1 e0       	ldi	r29, 0x01	; 1
 210:	f7 01       	movw	r30, r14
 212:	85 81       	ldd	r24, Z+5	; 0x05
 214:	81 33       	cpi	r24, 0x31	; 49
 216:	09 f0       	breq	.+2      	; 0x21a <executeCmd+0x7c>
 218:	d0 e0       	ldi	r29, 0x00	; 0
               uData=1;
            }
            else {
               uData=0;
            }
            devId = termInput[3]-48;
 21a:	f7 01       	movw	r30, r14
 21c:	c3 81       	ldd	r28, Z+3	; 0x03
 21e:	c0 53       	subi	r28, 0x30	; 48
            printf("\nTX Start: devId=%d State=%d\n", devId, uData);
 220:	1f 92       	push	r1
 222:	df 93       	push	r29
 224:	1f 92       	push	r1
 226:	cf 93       	push	r28
 228:	8b e3       	ldi	r24, 0x3B	; 59
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
            transmitt(devId, uData);
 234:	6d 2f       	mov	r22, r29
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitt>
            transmitt(devId, uData);
 23c:	6d 2f       	mov	r22, r29
 23e:	8c 2f       	mov	r24, r28
 240:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitt>
            transmitt(devId, uData);           
 244:	6d 2f       	mov	r22, r29
 246:	8c 2f       	mov	r24, r28
 248:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitt>
            promt();
 24c:	0e 94 57 00 	call	0xae	; 0xae <promt>
            break;
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	25 c0       	rjmp	.+74     	; 0x2a8 <executeCmd+0x10a>
         
         case RX:
            bitPacketComplete = false;
 25e:	10 92 0f 02 	sts	0x020F, r1
            intNumber = 0;
 262:	10 92 10 03 	sts	0x0310, r1
            interrupts = 0;
 266:	10 92 0d 02 	sts	0x020D, r1
 26a:	10 92 0c 02 	sts	0x020C, r1
            printf("\nWaiting for OOK signal packet!\n");
 26e:	89 e5       	ldi	r24, 0x59	; 89
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 86 03 	call	0x70c	; 0x70c <puts>
            // Initialize the pin-change interrupts... for handling the OOK data readout
            // MCUCR == MCU Control Register
            MCUCR |= 0x1; // Any logical change on INT0 generates an interrupt request
 276:	86 b7       	in	r24, 0x36	; 54
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	86 bf       	out	0x36, r24	; 54
   
            // GIMSK == General Interrupt Mask Register
            GIMSK |= 0x8;  // Pin Change Interrupt Enable 1 - for port A.
 27c:	8c b7       	in	r24, 0x3c	; 60
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	8c bf       	out	0x3c, r24	; 60
   
            // PCMSK1 - Pin Change Mask Register 1
            PCMSK0 |= 0x1; // Pin Change Enable Mask on PORTB => 0b000 0001 = (PA1)
 282:	87 b5       	in	r24, 0x27	; 39
 284:	81 60       	ori	r24, 0x01	; 1
 286:	87 bd       	out	0x27, r24	; 39
            TCNT0 = 0;
 288:	19 ba       	out	0x19, r1	; 25
            break;
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <executeCmd+0x10a>
         
         default:
            printf("\nNOP[i=%d]", i);
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	89 e7       	ldi	r24, 0x79	; 121
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
            promt();
 29c:	0e 94 57 00 	call	0xae	; 0xae <promt>
            break;
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
      }
   }
   return 0;
}
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <__vector_16>:
input

Every input character will be echoed back to the sending terminal.
*************************************************************************/
ISR(USART0_RXC_vect) // will execute for every received  byte from PC terminal.
{	
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
   int n = bytesReceived; // global byte counter...
 2e2:	c0 91 10 02 	lds	r28, 0x0210
   char rxChar;
   rxChar = USART_ReceiveByte(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 2d 03 	call	0x65a	; 0x65a <USART_ReceiveByte>
   //PORTC |= (1<<PORTC2);
   if (rxChar == 13) {
 2ec:	8d 30       	cpi	r24, 0x0D	; 13
 2ee:	41 f4       	brne	.+16     	; 0x300 <__vector_16+0x44>
      cmdComplete = true;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 61 03 	sts	0x0361, r24
      cmdLength = n;
 2f6:	c0 93 0a 02 	sts	0x020A, r28
      bytesReceived = 0;
 2fa:	10 92 10 02 	sts	0x0210, r1
      return;
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <__vector_16+0x5a>

Every input character will be echoed back to the sending terminal.
*************************************************************************/
ISR(USART0_RXC_vect) // will execute for every received  byte from PC terminal.
{	
   int n = bytesReceived; // global byte counter...
 300:	d0 e0       	ldi	r29, 0x00	; 0
   else if (rxChar == 3) {
      driveON = false;
   }
   ***/
   else {
      termInputBuffer[n] = rxChar;
 302:	fe 01       	movw	r30, r28
 304:	ef 5e       	subi	r30, 0xEF	; 239
 306:	fc 4f       	sbci	r31, 0xFC	; 252
 308:	80 83       	st	Z, r24
      // echo input char
      usart_putchar(rxChar, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	0e 94 3c 03 	call	0x678	; 0x678 <usart_putchar>
   }
   n++;
 310:	21 96       	adiw	r28, 0x01	; 1
   bytesReceived = n;
 312:	c0 93 10 02 	sts	0x0210, r28
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__vector_2>:
uint8_t phyStateTime[255];
uint8_t intNumber;
bool bitPacketComplete;
bool rxOn;

ISR(PCINT0_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
   // Initiate data collection by terminal command, which will enable the pin change interrupt.
   // Store all timer data for every pin change interrupt.
   // When timer interrupt triggers, disable pin change interrupt and analyze the collected data,
   // and print it to the command line terminal.
   uint8_t stateTime = 0;
   interrupts++;
 352:	80 91 0c 02 	lds	r24, 0x020C
 356:	90 91 0d 02 	lds	r25, 0x020D
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 0d 02 	sts	0x020D, r25
 360:	80 93 0c 02 	sts	0x020C, r24
   
   if (!rxOn) {
 364:	80 91 0b 02 	lds	r24, 0x020B
 368:	81 11       	cpse	r24, r1
 36a:	15 c0       	rjmp	.+42     	; 0x396 <__vector_2+0x5a>
      if (TCNT0 == 130) {
 36c:	89 b3       	in	r24, 0x19	; 25
 36e:	82 38       	cpi	r24, 0x82	; 130
 370:	81 f4       	brne	.+32     	; 0x392 <__vector_2+0x56>
      //if ((TCNT0 > 132) && (TCNT0 < 135)) {
         counter = TCNT0;      
 372:	89 b3       	in	r24, 0x19	; 25
 374:	80 93 0e 02 	sts	0x020E, r24
         rxOn = true;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 0b 02 	sts	0x020B, r24
         intNumber = 0;
 37e:	10 92 10 03 	sts	0x0310, r1
         memset(&phyStateTime[0], 0, 255);
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	e1 e1       	ldi	r30, 0x11	; 17
 386:	f2 e0       	ldi	r31, 0x02	; 2
 388:	df 01       	movw	r26, r30
 38a:	1d 92       	st	X+, r1
 38c:	8a 95       	dec	r24
 38e:	e9 f7       	brne	.-6      	; 0x38a <__vector_2+0x4e>
 390:	02 c0       	rjmp	.+4      	; 0x396 <__vector_2+0x5a>
      }
      else {         
         TCNT0 = 0;
 392:	19 ba       	out	0x19, r1	; 25
         return;
 394:	22 c0       	rjmp	.+68     	; 0x3da <__vector_2+0x9e>
      }
   }
   //interrupts++;
         
   stateTime = TCNT0;
 396:	89 b3       	in	r24, 0x19	; 25
   TCNT0 = 0;
 398:	19 ba       	out	0x19, r1	; 25
   if ((PINA&0x01) == 1) { // low-to-high
 39a:	78 9b       	sbis	0x0f, 0	; 15
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__vector_2+0x66>
       stateTime &= ~0x80;      
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <__vector_2+0x68>
       // the byte. (Should not exceed the value of 127 which equals to 2.7 ms.  
       // If it does it might indicate that the interrupt registered a preamble 
       // indication.)
   }
   else { // high-to-low
       stateTime |= 0x80;      
 3a2:	80 68       	ori	r24, 0x80	; 128
   }   
   if (intNumber < 132) {
 3a4:	e0 91 10 03 	lds	r30, 0x0310
 3a8:	e4 38       	cpi	r30, 0x84	; 132
 3aa:	48 f4       	brcc	.+18     	; 0x3be <__vector_2+0x82>
      phyStateTime[intNumber++] = stateTime;
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	9e 0f       	add	r25, r30
 3b0:	90 93 10 03 	sts	0x0310, r25
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	ef 5e       	subi	r30, 0xEF	; 239
 3b8:	fd 4f       	sbci	r31, 0xFD	; 253
 3ba:	80 83       	st	Z, r24
 3bc:	0e c0       	rjmp	.+28     	; 0x3da <__vector_2+0x9e>
   }
   else {
      rxOn = false;
 3be:	10 92 0b 02 	sts	0x020B, r1
      bitPacketComplete = true;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 0f 02 	sts	0x020F, r24
      MCUCR &= ~0x1;    // Disabling Any logical change on INT0 generates an interrupt request
 3c8:	86 b7       	in	r24, 0x36	; 54
 3ca:	8e 7f       	andi	r24, 0xFE	; 254
 3cc:	86 bf       	out	0x36, r24	; 54
      GIMSK &= ~0x8;   // Disabling Pin Change Interrupt Enable 1 - for all pins of port B.
 3ce:	8c b7       	in	r24, 0x3c	; 60
 3d0:	87 7f       	andi	r24, 0xF7	; 247
 3d2:	8c bf       	out	0x3c, r24	; 60
      PCMSK0 &= ~0x1;   // Disabling Pin Change Enable Mask on PORTB => 0b000 0010 = (PB1)
 3d4:	87 b5       	in	r24, 0x27	; 39
 3d6:	8e 7f       	andi	r24, 0xFE	; 254
 3d8:	87 bd       	out	0x27, r24	; 39
   }
   //TCNT0 = 0;
   //printf(".");
   // DONE!
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_10>:

ISR(TIM0_COMPA_vect) {
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
   // This interrupt service routine will be triggered when the counter has reached the value in the timer-compare register.
   //if ((rxOn) && (intNumber > 128)) {
   if (rxOn){
 412:	80 91 0b 02 	lds	r24, 0x020B
 416:	88 23       	and	r24, r24
 418:	99 f0       	breq	.+38     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
      // Disabling the pin change interrupt
      MCUCR &= ~0x1;    // Disabling Any logical change on INT0 generates an interrupt request
 41a:	86 b7       	in	r24, 0x36	; 54
 41c:	8e 7f       	andi	r24, 0xFE	; 254
 41e:	86 bf       	out	0x36, r24	; 54
      GIMSK &= ~0x8;   // Disabling Pin Change Interrupt Enable 1 - for all pins of port B.
 420:	8c b7       	in	r24, 0x3c	; 60
 422:	87 7f       	andi	r24, 0xF7	; 247
 424:	8c bf       	out	0x3c, r24	; 60
      PCMSK0 &= ~0x1;   // Disabling Pin Change Enable Mask on PORTB => 0b000 0010 = (PB1)
 426:	87 b5       	in	r24, 0x27	; 39
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	87 bd       	out	0x27, r24	; 39
      bitPacketComplete = true;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 0f 02 	sts	0x020F, r24
      rxOn = false;
 432:	10 92 0b 02 	sts	0x020B, r1
      TCNT0 = 0;
 436:	19 ba       	out	0x19, r1	; 25
      printf("TIM0_COMPA_vect\n");
 438:	8c e9       	ldi	r24, 0x9C	; 156
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 86 03 	call	0x70c	; 0x70c <puts>
   }
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <ledBlink>:
            //totalNumOfBits++;
            //if (totalNumOfBits%10) printf(" ");
         }
      }
   }
}
 462:	6b 9a       	sbi	0x0d, 3	; 13
 464:	2f e3       	ldi	r18, 0x3F	; 63
 466:	8e e7       	ldi	r24, 0x7E	; 126
 468:	95 e0       	ldi	r25, 0x05	; 5
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <ledBlink+0x8>
 472:	00 c0       	rjmp	.+0      	; 0x474 <ledBlink+0x12>
 474:	00 00       	nop
 476:	6b 98       	cbi	0x0d, 3	; 13
 478:	2f e3       	ldi	r18, 0x3F	; 63
 47a:	8e e7       	ldi	r24, 0x7E	; 126
 47c:	95 e0       	ldi	r25, 0x05	; 5
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <ledBlink+0x1c>
 486:	00 c0       	rjmp	.+0      	; 0x488 <ledBlink+0x26>
 488:	00 00       	nop
 48a:	08 95       	ret

0000048c <init>:

//111111111111111111111111111111111111111111111111111111111111111111111111
void init() {
 48c:	cf 93       	push	r28
   //DDRA |= (1<<PORTA0)|(1<<PORTA2)|(1<<PORTA3)|(1<<PORTA4)|(1<<PORTA5)|(1<<PORTA6);
   DDRA |= (1<<PORTA2);
 48e:	82 9a       	sbi	0x10, 2	; 16
   DDRA &= ~(1<<PORTA1); // Making PA1 as input for the manual-/PC-operation switch 
 490:	81 98       	cbi	0x10, 1	; 16
   PUEA |= (1<<PORTA1); // Using pull-up on PA1
 492:	91 9a       	sbi	0x12, 1	; 18
   //CCP=0xD8; //write key to configuration change protection register
   //WDTCSR=(1<<WDP3)|(1<<WDP0)|(1<<WDIE); //enable WDT interrupt with longest prescale option (8 seconds)
   
   // Using PB1 for reading OOK data on the 433MHz band
   //DDRB &= ~(1<<PORTB1);
   DDRB |= (1<<PORTB3); // Blue LED
 494:	63 9a       	sbi	0x0c, 3	; 12

   // Using PA0 for reading OOK data on the 433MHz band
   DDRA &= ~(1<<PORTA0);
 496:	80 98       	cbi	0x10, 0	; 16

   // Not sure if a pull-up is needed on the input pin... 
   //PUEB |= (1<<PORTB1)
   
   // PC2 as output: LED2.
   DDRC |= (1<<PORTC2);
 498:	42 9a       	sbi	0x08, 2	; 8
   // |  1 |  0 |  1 | (clock I/O)/1024 from prescaler 
   // |  1 |  1 |  0 | External clock source T0. Clock on falling edge 
   // |  1 |  1 |  1 | External clock source T0. Clock on rising edge 
   
   //preScale = 256;
   TCCR0B |= 0x4; // div 256 ==> each Timer tick = 256*1 / 12 000 000 = 21,33us ==> 256 Timer ticks = 5,46ms
 49a:	d2 9a       	sbi	0x1a, 2	; 26
   //TIFR |= 0x1; // Clearing the interrupt Output Compare Flag 0 A AND triggering the interrupt handler for this.
   // Set Compare register value..
   // TO BE DEFINED
   
   // Assign that address for my stdout function...
   stdout = &mystdout;
 49c:	88 e0       	ldi	r24, 0x08	; 8
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	90 93 65 03 	sts	0x0365, r25
 4a4:	80 93 64 03 	sts	0x0364, r24
   USART_Init(0);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 19 03 	call	0x632	; 0x632 <USART_Init>
   sei();
 4ae:	78 94       	sei
   
   // Boot printout...
   printf("Version.%d.%d[build:%d]\n", MAJOR_VERSION, MINOR_VERSION, BUILD);
 4b0:	1f 92       	push	r1
 4b2:	1f 92       	push	r1
 4b4:	1f 92       	push	r1
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	8f 93       	push	r24
 4ba:	1f 92       	push	r1
 4bc:	1f 92       	push	r1
 4be:	8c ea       	ldi	r24, 0xAC	; 172
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	9f 93       	push	r25
 4c4:	8f 93       	push	r24
 4c6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
 4ca:	8d b7       	in	r24, 0x3d	; 61
 4cc:	9e b7       	in	r25, 0x3e	; 62
 4ce:	08 96       	adiw	r24, 0x08	; 8
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	9e bf       	out	0x3e, r25	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	8d bf       	out	0x3d, r24	; 61
 4da:	c4 e0       	ldi	r28, 0x04	; 4
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <init+0x64>
   for(int8_t i=5; i>0; i--)
   {
      if (i==1) {
         printf("\n");
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <putchar>
      }
      else {
         printf(".");
      }
      ledBlink();
 4e6:	0e 94 31 02 	call	0x462	; 0x462 <ledBlink>
   }   
   promt();
 4ea:	0e 94 57 00 	call	0xae	; 0xae <promt>
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__stack+0x3>
   {
      if (i==1) {
         printf("\n");
      }
      else {
         printf(".");
 4f0:	8e e2       	ldi	r24, 0x2E	; 46
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <putchar>
      }
      ledBlink();
 4f8:	0e 94 31 02 	call	0x462	; 0x462 <ledBlink>
 4fc:	c1 50       	subi	r28, 0x01	; 1
   
   // Boot printout...
   printf("Version.%d.%d[build:%d]\n", MAJOR_VERSION, MINOR_VERSION, BUILD);
   for(int8_t i=5; i>0; i--)
   {
      if (i==1) {
 4fe:	c1 f7       	brne	.-16     	; 0x4f0 <init+0x64>
 500:	ee cf       	rjmp	.-36     	; 0x4de <init+0x52>
         printf(".");
      }
      ledBlink();
   }   
   promt();
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <main>:

int main(void)
{
   bitPacketComplete = false;
 506:	10 92 0f 02 	sts	0x020F, r1
   // Initialize the controller with ISRs, UART and other MCU configuration.
   init();
 50a:	0e 94 46 02 	call	0x48c	; 0x48c <init>
   // Command-loop
   while(1) {
      if (cmdComplete) {
         cmdComplete = false;         
         executeCmd(&termInputBuffer[0], cmdLength);
         memset(termInputBuffer, 0, 80);
 50e:	0f 2e       	mov	r0, r31
 510:	f0 e5       	ldi	r31, 0x50	; 80
 512:	2f 2e       	mov	r2, r31
 514:	f0 2d       	mov	r31, r0
            printf("\nInterrupts=%d\n", interrupts);
            //decode(&phyStateTime[0], intNumber);
            bitPacketComplete = false;
         }
         else {
            printf("NO DATA...");
 516:	0f 2e       	mov	r0, r31
 518:	ff ef       	ldi	r31, 0xFF	; 255
 51a:	8f 2e       	mov	r8, r31
 51c:	f1 e0       	ldi	r31, 0x01	; 1
 51e:	9f 2e       	mov	r9, r31
 520:	f0 2d       	mov	r31, r0
         if (intNumber > 0) {
            
            for (int i = 0; i < intNumber; i++){
               printf("%02x ", phyStateTime[i]);
            }
            printf("\n%d Symbols received.\n", intNumber);
 522:	0f 2e       	mov	r0, r31
 524:	fb ec       	ldi	r31, 0xCB	; 203
 526:	af 2e       	mov	r10, r31
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	bf 2e       	mov	r11, r31
 52c:	f0 2d       	mov	r31, r0
            printf("\nCounter=%d\n", counter);
 52e:	0f 2e       	mov	r0, r31
 530:	f2 ee       	ldi	r31, 0xE2	; 226
 532:	cf 2e       	mov	r12, r31
 534:	f1 e0       	ldi	r31, 0x01	; 1
 536:	df 2e       	mov	r13, r31
 538:	f0 2d       	mov	r31, r0
            printf("\nInterrupts=%d\n", interrupts);
 53a:	0f 2e       	mov	r0, r31
 53c:	ff ee       	ldi	r31, 0xEF	; 239
 53e:	ef 2e       	mov	r14, r31
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	ff 2e       	mov	r15, r31
 544:	f0 2d       	mov	r31, r0
 546:	0f 2e       	mov	r0, r31
 548:	f1 e1       	ldi	r31, 0x11	; 17
 54a:	6f 2e       	mov	r6, r31
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	7f 2e       	mov	r7, r31
 550:	f0 2d       	mov	r31, r0
      }
      if (bitPacketComplete) {
         
         if (intNumber > 0) {
            
            for (int i = 0; i < intNumber; i++){
 552:	31 2c       	mov	r3, r1
               printf("%02x ", phyStateTime[i]);
 554:	05 ec       	ldi	r16, 0xC5	; 197
 556:	11 e0       	ldi	r17, 0x01	; 1
   // Initialize the controller with ISRs, UART and other MCU configuration.
   init();

   // Command-loop
   while(1) {
      if (cmdComplete) {
 558:	80 91 61 03 	lds	r24, 0x0361
 55c:	88 23       	and	r24, r24
 55e:	81 f0       	breq	.+32     	; 0x580 <main+0x7a>
         cmdComplete = false;         
 560:	10 92 61 03 	sts	0x0361, r1
         executeCmd(&termInputBuffer[0], cmdLength);
 564:	60 91 0a 02 	lds	r22, 0x020A
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	81 e1       	ldi	r24, 0x11	; 17
 56c:	93 e0       	ldi	r25, 0x03	; 3
 56e:	0e 94 cf 00 	call	0x19e	; 0x19e <executeCmd>
         memset(termInputBuffer, 0, 80);
 572:	e1 e1       	ldi	r30, 0x11	; 17
 574:	f3 e0       	ldi	r31, 0x03	; 3
 576:	df 01       	movw	r26, r30
 578:	22 2d       	mov	r18, r2
 57a:	1d 92       	st	X+, r1
 57c:	2a 95       	dec	r18
 57e:	e9 f7       	brne	.-6      	; 0x57a <main+0x74>
      }
      if (bitPacketComplete) {
 580:	80 91 0f 02 	lds	r24, 0x020F
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <main+0x84>
 588:	4a c0       	rjmp	.+148    	; 0x61e <main+0x118>
         
         if (intNumber > 0) {
 58a:	80 91 10 03 	lds	r24, 0x0310
 58e:	88 23       	and	r24, r24
 590:	f1 f1       	breq	.+124    	; 0x60e <main+0x108>
            
            for (int i = 0; i < intNumber; i++){
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	18 16       	cp	r1, r24
 596:	19 06       	cpc	r1, r25
 598:	bc f4       	brge	.+46     	; 0x5c8 <main+0xc2>
 59a:	e3 01       	movw	r28, r6
 59c:	43 2c       	mov	r4, r3
 59e:	51 2c       	mov	r5, r1
               printf("%02x ", phyStateTime[i]);
 5a0:	89 91       	ld	r24, Y+
 5a2:	1f 92       	push	r1
 5a4:	8f 93       	push	r24
 5a6:	1f 93       	push	r17
 5a8:	0f 93       	push	r16
 5aa:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
      }
      if (bitPacketComplete) {
         
         if (intNumber > 0) {
            
            for (int i = 0; i < intNumber; i++){
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	48 1a       	sub	r4, r24
 5b2:	58 0a       	sbc	r5, r24
 5b4:	80 91 10 03 	lds	r24, 0x0310
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	48 16       	cp	r4, r24
 5c4:	59 06       	cpc	r5, r25
 5c6:	64 f3       	brlt	.-40     	; 0x5a0 <main+0x9a>
               printf("%02x ", phyStateTime[i]);
            }
            printf("\n%d Symbols received.\n", intNumber);
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	bf 92       	push	r11
 5ce:	af 92       	push	r10
 5d0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
            printf("\nCounter=%d\n", counter);
 5d4:	80 91 0e 02 	lds	r24, 0x020E
 5d8:	1f 92       	push	r1
 5da:	8f 93       	push	r24
 5dc:	df 92       	push	r13
 5de:	cf 92       	push	r12
 5e0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
            printf("\nInterrupts=%d\n", interrupts);
 5e4:	80 91 0d 02 	lds	r24, 0x020D
 5e8:	8f 93       	push	r24
 5ea:	80 91 0c 02 	lds	r24, 0x020C
 5ee:	8f 93       	push	r24
 5f0:	ff 92       	push	r15
 5f2:	ef 92       	push	r14
 5f4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
            //decode(&phyStateTime[0], intNumber);
            bitPacketComplete = false;
 5f8:	10 92 0f 02 	sts	0x020F, r1
 5fc:	ad b7       	in	r26, 0x3d	; 61
 5fe:	be b7       	in	r27, 0x3e	; 62
 600:	1c 96       	adiw	r26, 0x0c	; 12
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	be bf       	out	0x3e, r27	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	ad bf       	out	0x3d, r26	; 61
 60c:	06 c0       	rjmp	.+12     	; 0x61a <main+0x114>
         }
         else {
            printf("NO DATA...");
 60e:	9f 92       	push	r9
 610:	8f 92       	push	r8
 612:	0e 94 69 03 	call	0x6d2	; 0x6d2 <printf>
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
            
         }
         promt();
 61a:	0e 94 57 00 	call	0xae	; 0xae <promt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61e:	bf ef       	ldi	r27, 0xFF	; 255
 620:	2e e9       	ldi	r18, 0x9E	; 158
 622:	84 e2       	ldi	r24, 0x24	; 36
 624:	b1 50       	subi	r27, 0x01	; 1
 626:	20 40       	sbci	r18, 0x00	; 0
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x11e>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x128>
 62e:	00 00       	nop
 630:	93 cf       	rjmp	.-218    	; 0x558 <main+0x52>

00000632 <USART_Init>:
   // loop through entire string
   while (*s) {
      usart_putchar(*s, comport);
      s++;
   }
}
 632:	81 11       	cpse	r24, r1
 634:	09 c0       	rjmp	.+18     	; 0x648 <USART_Init+0x16>
 636:	8d e4       	ldi	r24, 0x4D	; 77
 638:	81 bd       	out	0x21, r24	; 33
 63a:	12 bc       	out	0x22, r1	; 34
 63c:	88 e1       	ldi	r24, 0x18	; 24
 63e:	85 bd       	out	0x25, r24	; 37
 640:	85 b5       	in	r24, 0x25	; 37
 642:	80 68       	ori	r24, 0x80	; 128
 644:	85 bd       	out	0x25, r24	; 37
 646:	08 95       	ret
 648:	8d e4       	ldi	r24, 0x4D	; 77
 64a:	80 93 74 00 	sts	0x0074, r24
 64e:	10 92 75 00 	sts	0x0075, r1
 652:	88 e1       	ldi	r24, 0x18	; 24
 654:	80 93 78 00 	sts	0x0078, r24
 658:	08 95       	ret

0000065a <USART_ReceiveByte>:
 65a:	81 11       	cpse	r24, r1
 65c:	05 c0       	rjmp	.+10     	; 0x668 <USART_ReceiveByte+0xe>
 65e:	06 b4       	in	r0, 0x26	; 38
 660:	07 fe       	sbrs	r0, 7
 662:	fd cf       	rjmp	.-6      	; 0x65e <USART_ReceiveByte+0x4>
 664:	80 b5       	in	r24, 0x20	; 32
 666:	08 95       	ret
 668:	e9 e7       	ldi	r30, 0x79	; 121
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	ec f7       	brge	.-6      	; 0x66c <USART_ReceiveByte+0x12>
 672:	80 91 73 00 	lds	r24, 0x0073
 676:	08 95       	ret

00000678 <usart_putchar>:
 678:	61 11       	cpse	r22, r1
 67a:	05 c0       	rjmp	.+10     	; 0x686 <usart_putchar+0xe>
 67c:	06 b4       	in	r0, 0x26	; 38
 67e:	05 fe       	sbrs	r0, 5
 680:	fd cf       	rjmp	.-6      	; 0x67c <usart_putchar+0x4>
 682:	80 bd       	out	0x20, r24	; 32
 684:	08 95       	ret
 686:	e9 e7       	ldi	r30, 0x79	; 121
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	90 81       	ld	r25, Z
 68c:	95 ff       	sbrs	r25, 5
 68e:	fd cf       	rjmp	.-6      	; 0x68a <usart_putchar+0x12>
 690:	80 93 73 00 	sts	0x0073, r24
 694:	08 95       	ret

00000696 <usart_putchar_printf>:

// this function is called by printf as a stream handler
int usart_putchar_printf(char var, FILE *stream) {
 696:	cf 93       	push	r28
 698:	c8 2f       	mov	r28, r24
   // translate \n to \r for br@y++ terminal
   if (var == '\n')
 69a:	8a 30       	cpi	r24, 0x0A	; 10
 69c:	21 f4       	brne	.+8      	; 0x6a6 <usart_putchar_printf+0x10>
      usart_putchar('\r', 0);   
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	8d e0       	ldi	r24, 0x0D	; 13
 6a2:	0e 94 3c 03 	call	0x678	; 0x678 <usart_putchar>
   
   usart_putchar(var, 0);
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	8c 2f       	mov	r24, r28
 6aa:	0e 94 3c 03 	call	0x678	; 0x678 <usart_putchar>
   return 0;
}
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <strncmp>:
 6b6:	fb 01       	movw	r30, r22
 6b8:	dc 01       	movw	r26, r24
 6ba:	41 50       	subi	r20, 0x01	; 1
 6bc:	50 40       	sbci	r21, 0x00	; 0
 6be:	30 f0       	brcs	.+12     	; 0x6cc <strncmp+0x16>
 6c0:	8d 91       	ld	r24, X+
 6c2:	01 90       	ld	r0, Z+
 6c4:	80 19       	sub	r24, r0
 6c6:	19 f4       	brne	.+6      	; 0x6ce <strncmp+0x18>
 6c8:	00 20       	and	r0, r0
 6ca:	b9 f7       	brne	.-18     	; 0x6ba <strncmp+0x4>
 6cc:	88 1b       	sub	r24, r24
 6ce:	99 0b       	sbc	r25, r25
 6d0:	08 95       	ret

000006d2 <printf>:
 6d2:	a0 e0       	ldi	r26, 0x00	; 0
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	ef e6       	ldi	r30, 0x6F	; 111
 6d8:	f3 e0       	ldi	r31, 0x03	; 3
 6da:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__prologue_saves__+0x20>
 6de:	ae 01       	movw	r20, r28
 6e0:	4b 5f       	subi	r20, 0xFB	; 251
 6e2:	5f 4f       	sbci	r21, 0xFF	; 255
 6e4:	fa 01       	movw	r30, r20
 6e6:	61 91       	ld	r22, Z+
 6e8:	71 91       	ld	r23, Z+
 6ea:	af 01       	movw	r20, r30
 6ec:	80 91 64 03 	lds	r24, 0x0364
 6f0:	90 91 65 03 	lds	r25, 0x0365
 6f4:	0e 94 b6 03 	call	0x76c	; 0x76c <vfprintf>
 6f8:	e2 e0       	ldi	r30, 0x02	; 2
 6fa:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__epilogue_restores__+0x20>

000006fe <putchar>:
 6fe:	60 91 64 03 	lds	r22, 0x0364
 702:	70 91 65 03 	lds	r23, 0x0365
 706:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 70a:	08 95       	ret

0000070c <puts>:
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	e0 91 64 03 	lds	r30, 0x0364
 718:	f0 91 65 03 	lds	r31, 0x0365
 71c:	23 81       	ldd	r18, Z+3	; 0x03
 71e:	21 ff       	sbrs	r18, 1
 720:	1b c0       	rjmp	.+54     	; 0x758 <puts+0x4c>
 722:	8c 01       	movw	r16, r24
 724:	d0 e0       	ldi	r29, 0x00	; 0
 726:	c0 e0       	ldi	r28, 0x00	; 0
 728:	f8 01       	movw	r30, r16
 72a:	81 91       	ld	r24, Z+
 72c:	8f 01       	movw	r16, r30
 72e:	60 91 64 03 	lds	r22, 0x0364
 732:	70 91 65 03 	lds	r23, 0x0365
 736:	db 01       	movw	r26, r22
 738:	18 96       	adiw	r26, 0x08	; 8
 73a:	ed 91       	ld	r30, X+
 73c:	fc 91       	ld	r31, X
 73e:	19 97       	sbiw	r26, 0x09	; 9
 740:	88 23       	and	r24, r24
 742:	31 f0       	breq	.+12     	; 0x750 <puts+0x44>
 744:	09 95       	icall
 746:	89 2b       	or	r24, r25
 748:	79 f3       	breq	.-34     	; 0x728 <puts+0x1c>
 74a:	df ef       	ldi	r29, 0xFF	; 255
 74c:	cf ef       	ldi	r28, 0xFF	; 255
 74e:	ec cf       	rjmp	.-40     	; 0x728 <puts+0x1c>
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	09 95       	icall
 754:	89 2b       	or	r24, r25
 756:	19 f0       	breq	.+6      	; 0x75e <puts+0x52>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	02 c0       	rjmp	.+4      	; 0x762 <puts+0x56>
 75e:	8d 2f       	mov	r24, r29
 760:	9c 2f       	mov	r25, r28
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <vfprintf>:
 76c:	ac e0       	ldi	r26, 0x0C	; 12
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	ec eb       	ldi	r30, 0xBC	; 188
 772:	f3 e0       	ldi	r31, 0x03	; 3
 774:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__prologue_saves__>
 778:	7c 01       	movw	r14, r24
 77a:	6b 01       	movw	r12, r22
 77c:	8a 01       	movw	r16, r20
 77e:	fc 01       	movw	r30, r24
 780:	17 82       	std	Z+7, r1	; 0x07
 782:	16 82       	std	Z+6, r1	; 0x06
 784:	83 81       	ldd	r24, Z+3	; 0x03
 786:	81 ff       	sbrs	r24, 1
 788:	bf c1       	rjmp	.+894    	; 0xb08 <vfprintf+0x39c>
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	4c 01       	movw	r8, r24
 790:	f7 01       	movw	r30, r14
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	f6 01       	movw	r30, r12
 796:	93 fd       	sbrc	r25, 3
 798:	85 91       	lpm	r24, Z+
 79a:	93 ff       	sbrs	r25, 3
 79c:	81 91       	ld	r24, Z+
 79e:	6f 01       	movw	r12, r30
 7a0:	88 23       	and	r24, r24
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <vfprintf+0x3a>
 7a4:	ad c1       	rjmp	.+858    	; 0xb00 <vfprintf+0x394>
 7a6:	85 32       	cpi	r24, 0x25	; 37
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <vfprintf+0x4c>
 7aa:	93 fd       	sbrc	r25, 3
 7ac:	85 91       	lpm	r24, Z+
 7ae:	93 ff       	sbrs	r25, 3
 7b0:	81 91       	ld	r24, Z+
 7b2:	6f 01       	movw	r12, r30
 7b4:	85 32       	cpi	r24, 0x25	; 37
 7b6:	29 f4       	brne	.+10     	; 0x7c2 <vfprintf+0x56>
 7b8:	b7 01       	movw	r22, r14
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 7c0:	e7 cf       	rjmp	.-50     	; 0x790 <vfprintf+0x24>
 7c2:	51 2c       	mov	r5, r1
 7c4:	31 2c       	mov	r3, r1
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	20 32       	cpi	r18, 0x20	; 32
 7ca:	a0 f4       	brcc	.+40     	; 0x7f4 <vfprintf+0x88>
 7cc:	8b 32       	cpi	r24, 0x2B	; 43
 7ce:	69 f0       	breq	.+26     	; 0x7ea <vfprintf+0x7e>
 7d0:	30 f4       	brcc	.+12     	; 0x7de <vfprintf+0x72>
 7d2:	80 32       	cpi	r24, 0x20	; 32
 7d4:	59 f0       	breq	.+22     	; 0x7ec <vfprintf+0x80>
 7d6:	83 32       	cpi	r24, 0x23	; 35
 7d8:	69 f4       	brne	.+26     	; 0x7f4 <vfprintf+0x88>
 7da:	20 61       	ori	r18, 0x10	; 16
 7dc:	2e c0       	rjmp	.+92     	; 0x83a <vfprintf+0xce>
 7de:	8d 32       	cpi	r24, 0x2D	; 45
 7e0:	39 f0       	breq	.+14     	; 0x7f0 <vfprintf+0x84>
 7e2:	80 33       	cpi	r24, 0x30	; 48
 7e4:	39 f4       	brne	.+14     	; 0x7f4 <vfprintf+0x88>
 7e6:	21 60       	ori	r18, 0x01	; 1
 7e8:	28 c0       	rjmp	.+80     	; 0x83a <vfprintf+0xce>
 7ea:	22 60       	ori	r18, 0x02	; 2
 7ec:	24 60       	ori	r18, 0x04	; 4
 7ee:	25 c0       	rjmp	.+74     	; 0x83a <vfprintf+0xce>
 7f0:	28 60       	ori	r18, 0x08	; 8
 7f2:	23 c0       	rjmp	.+70     	; 0x83a <vfprintf+0xce>
 7f4:	27 fd       	sbrc	r18, 7
 7f6:	29 c0       	rjmp	.+82     	; 0x84a <vfprintf+0xde>
 7f8:	30 ed       	ldi	r19, 0xD0	; 208
 7fa:	38 0f       	add	r19, r24
 7fc:	3a 30       	cpi	r19, 0x0A	; 10
 7fe:	88 f4       	brcc	.+34     	; 0x822 <vfprintf+0xb6>
 800:	26 ff       	sbrs	r18, 6
 802:	07 c0       	rjmp	.+14     	; 0x812 <vfprintf+0xa6>
 804:	85 2d       	mov	r24, r5
 806:	6a e0       	ldi	r22, 0x0A	; 10
 808:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulqi3>
 80c:	58 2e       	mov	r5, r24
 80e:	53 0e       	add	r5, r19
 810:	14 c0       	rjmp	.+40     	; 0x83a <vfprintf+0xce>
 812:	83 2d       	mov	r24, r3
 814:	6a e0       	ldi	r22, 0x0A	; 10
 816:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulqi3>
 81a:	38 2e       	mov	r3, r24
 81c:	33 0e       	add	r3, r19
 81e:	20 62       	ori	r18, 0x20	; 32
 820:	0c c0       	rjmp	.+24     	; 0x83a <vfprintf+0xce>
 822:	8e 32       	cpi	r24, 0x2E	; 46
 824:	21 f4       	brne	.+8      	; 0x82e <vfprintf+0xc2>
 826:	26 fd       	sbrc	r18, 6
 828:	6b c1       	rjmp	.+726    	; 0xb00 <vfprintf+0x394>
 82a:	20 64       	ori	r18, 0x40	; 64
 82c:	06 c0       	rjmp	.+12     	; 0x83a <vfprintf+0xce>
 82e:	8c 36       	cpi	r24, 0x6C	; 108
 830:	11 f4       	brne	.+4      	; 0x836 <vfprintf+0xca>
 832:	20 68       	ori	r18, 0x80	; 128
 834:	02 c0       	rjmp	.+4      	; 0x83a <vfprintf+0xce>
 836:	88 36       	cpi	r24, 0x68	; 104
 838:	41 f4       	brne	.+16     	; 0x84a <vfprintf+0xde>
 83a:	f6 01       	movw	r30, r12
 83c:	93 fd       	sbrc	r25, 3
 83e:	85 91       	lpm	r24, Z+
 840:	93 ff       	sbrs	r25, 3
 842:	81 91       	ld	r24, Z+
 844:	6f 01       	movw	r12, r30
 846:	81 11       	cpse	r24, r1
 848:	bf cf       	rjmp	.-130    	; 0x7c8 <vfprintf+0x5c>
 84a:	98 2f       	mov	r25, r24
 84c:	9f 7d       	andi	r25, 0xDF	; 223
 84e:	95 54       	subi	r25, 0x45	; 69
 850:	93 30       	cpi	r25, 0x03	; 3
 852:	28 f4       	brcc	.+10     	; 0x85e <vfprintf+0xf2>
 854:	0c 5f       	subi	r16, 0xFC	; 252
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	ff e3       	ldi	r31, 0x3F	; 63
 85a:	f9 83       	std	Y+1, r31	; 0x01
 85c:	0d c0       	rjmp	.+26     	; 0x878 <vfprintf+0x10c>
 85e:	83 36       	cpi	r24, 0x63	; 99
 860:	31 f0       	breq	.+12     	; 0x86e <vfprintf+0x102>
 862:	83 37       	cpi	r24, 0x73	; 115
 864:	71 f0       	breq	.+28     	; 0x882 <vfprintf+0x116>
 866:	83 35       	cpi	r24, 0x53	; 83
 868:	09 f0       	breq	.+2      	; 0x86c <vfprintf+0x100>
 86a:	5b c0       	rjmp	.+182    	; 0x922 <vfprintf+0x1b6>
 86c:	22 c0       	rjmp	.+68     	; 0x8b2 <vfprintf+0x146>
 86e:	f8 01       	movw	r30, r16
 870:	80 81       	ld	r24, Z
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	0e 5f       	subi	r16, 0xFE	; 254
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	44 24       	eor	r4, r4
 87a:	43 94       	inc	r4
 87c:	51 2c       	mov	r5, r1
 87e:	54 01       	movw	r10, r8
 880:	15 c0       	rjmp	.+42     	; 0x8ac <vfprintf+0x140>
 882:	38 01       	movw	r6, r16
 884:	f2 e0       	ldi	r31, 0x02	; 2
 886:	6f 0e       	add	r6, r31
 888:	71 1c       	adc	r7, r1
 88a:	f8 01       	movw	r30, r16
 88c:	a0 80       	ld	r10, Z
 88e:	b1 80       	ldd	r11, Z+1	; 0x01
 890:	26 ff       	sbrs	r18, 6
 892:	03 c0       	rjmp	.+6      	; 0x89a <vfprintf+0x12e>
 894:	65 2d       	mov	r22, r5
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x132>
 89a:	6f ef       	ldi	r22, 0xFF	; 255
 89c:	7f ef       	ldi	r23, 0xFF	; 255
 89e:	c5 01       	movw	r24, r10
 8a0:	2c 87       	std	Y+12, r18	; 0x0c
 8a2:	0e 94 95 05 	call	0xb2a	; 0xb2a <strnlen>
 8a6:	2c 01       	movw	r4, r24
 8a8:	83 01       	movw	r16, r6
 8aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ac:	2f 77       	andi	r18, 0x7F	; 127
 8ae:	22 2e       	mov	r2, r18
 8b0:	17 c0       	rjmp	.+46     	; 0x8e0 <vfprintf+0x174>
 8b2:	38 01       	movw	r6, r16
 8b4:	f2 e0       	ldi	r31, 0x02	; 2
 8b6:	6f 0e       	add	r6, r31
 8b8:	71 1c       	adc	r7, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	a0 80       	ld	r10, Z
 8be:	b1 80       	ldd	r11, Z+1	; 0x01
 8c0:	26 ff       	sbrs	r18, 6
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x15e>
 8c4:	65 2d       	mov	r22, r5
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x162>
 8ca:	6f ef       	ldi	r22, 0xFF	; 255
 8cc:	7f ef       	ldi	r23, 0xFF	; 255
 8ce:	c5 01       	movw	r24, r10
 8d0:	2c 87       	std	Y+12, r18	; 0x0c
 8d2:	0e 94 8a 05 	call	0xb14	; 0xb14 <strnlen_P>
 8d6:	2c 01       	movw	r4, r24
 8d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8da:	20 68       	ori	r18, 0x80	; 128
 8dc:	22 2e       	mov	r2, r18
 8de:	83 01       	movw	r16, r6
 8e0:	23 fc       	sbrc	r2, 3
 8e2:	1b c0       	rjmp	.+54     	; 0x91a <vfprintf+0x1ae>
 8e4:	83 2d       	mov	r24, r3
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	48 16       	cp	r4, r24
 8ea:	59 06       	cpc	r5, r25
 8ec:	b0 f4       	brcc	.+44     	; 0x91a <vfprintf+0x1ae>
 8ee:	b7 01       	movw	r22, r14
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 8f8:	3a 94       	dec	r3
 8fa:	f4 cf       	rjmp	.-24     	; 0x8e4 <vfprintf+0x178>
 8fc:	f5 01       	movw	r30, r10
 8fe:	27 fc       	sbrc	r2, 7
 900:	85 91       	lpm	r24, Z+
 902:	27 fe       	sbrs	r2, 7
 904:	81 91       	ld	r24, Z+
 906:	5f 01       	movw	r10, r30
 908:	b7 01       	movw	r22, r14
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 910:	31 10       	cpse	r3, r1
 912:	3a 94       	dec	r3
 914:	f1 e0       	ldi	r31, 0x01	; 1
 916:	4f 1a       	sub	r4, r31
 918:	51 08       	sbc	r5, r1
 91a:	41 14       	cp	r4, r1
 91c:	51 04       	cpc	r5, r1
 91e:	71 f7       	brne	.-36     	; 0x8fc <vfprintf+0x190>
 920:	e5 c0       	rjmp	.+458    	; 0xaec <vfprintf+0x380>
 922:	84 36       	cpi	r24, 0x64	; 100
 924:	11 f0       	breq	.+4      	; 0x92a <vfprintf+0x1be>
 926:	89 36       	cpi	r24, 0x69	; 105
 928:	39 f5       	brne	.+78     	; 0x978 <vfprintf+0x20c>
 92a:	f8 01       	movw	r30, r16
 92c:	27 ff       	sbrs	r18, 7
 92e:	07 c0       	rjmp	.+14     	; 0x93e <vfprintf+0x1d2>
 930:	60 81       	ld	r22, Z
 932:	71 81       	ldd	r23, Z+1	; 0x01
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	08 c0       	rjmp	.+16     	; 0x94e <vfprintf+0x1e2>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	07 2e       	mov	r0, r23
 944:	00 0c       	add	r0, r0
 946:	88 0b       	sbc	r24, r24
 948:	99 0b       	sbc	r25, r25
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	2f 76       	andi	r18, 0x6F	; 111
 950:	72 2e       	mov	r7, r18
 952:	97 ff       	sbrs	r25, 7
 954:	09 c0       	rjmp	.+18     	; 0x968 <vfprintf+0x1fc>
 956:	90 95       	com	r25
 958:	80 95       	com	r24
 95a:	70 95       	com	r23
 95c:	61 95       	neg	r22
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	20 68       	ori	r18, 0x80	; 128
 966:	72 2e       	mov	r7, r18
 968:	2a e0       	ldi	r18, 0x0A	; 10
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	a4 01       	movw	r20, r8
 96e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__ultoa_invert>
 972:	a8 2e       	mov	r10, r24
 974:	a8 18       	sub	r10, r8
 976:	44 c0       	rjmp	.+136    	; 0xa00 <vfprintf+0x294>
 978:	85 37       	cpi	r24, 0x75	; 117
 97a:	29 f4       	brne	.+10     	; 0x986 <vfprintf+0x21a>
 97c:	2f 7e       	andi	r18, 0xEF	; 239
 97e:	b2 2e       	mov	r11, r18
 980:	2a e0       	ldi	r18, 0x0A	; 10
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	25 c0       	rjmp	.+74     	; 0x9d0 <vfprintf+0x264>
 986:	f2 2f       	mov	r31, r18
 988:	f9 7f       	andi	r31, 0xF9	; 249
 98a:	bf 2e       	mov	r11, r31
 98c:	8f 36       	cpi	r24, 0x6F	; 111
 98e:	c1 f0       	breq	.+48     	; 0x9c0 <vfprintf+0x254>
 990:	18 f4       	brcc	.+6      	; 0x998 <vfprintf+0x22c>
 992:	88 35       	cpi	r24, 0x58	; 88
 994:	79 f0       	breq	.+30     	; 0x9b4 <vfprintf+0x248>
 996:	b4 c0       	rjmp	.+360    	; 0xb00 <vfprintf+0x394>
 998:	80 37       	cpi	r24, 0x70	; 112
 99a:	19 f0       	breq	.+6      	; 0x9a2 <vfprintf+0x236>
 99c:	88 37       	cpi	r24, 0x78	; 120
 99e:	21 f0       	breq	.+8      	; 0x9a8 <vfprintf+0x23c>
 9a0:	af c0       	rjmp	.+350    	; 0xb00 <vfprintf+0x394>
 9a2:	2f 2f       	mov	r18, r31
 9a4:	20 61       	ori	r18, 0x10	; 16
 9a6:	b2 2e       	mov	r11, r18
 9a8:	b4 fe       	sbrs	r11, 4
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <vfprintf+0x25a>
 9ac:	8b 2d       	mov	r24, r11
 9ae:	84 60       	ori	r24, 0x04	; 4
 9b0:	b8 2e       	mov	r11, r24
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <vfprintf+0x25a>
 9b4:	24 ff       	sbrs	r18, 4
 9b6:	0a c0       	rjmp	.+20     	; 0x9cc <vfprintf+0x260>
 9b8:	9f 2f       	mov	r25, r31
 9ba:	96 60       	ori	r25, 0x06	; 6
 9bc:	b9 2e       	mov	r11, r25
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <vfprintf+0x260>
 9c0:	28 e0       	ldi	r18, 0x08	; 8
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <vfprintf+0x264>
 9c6:	20 e1       	ldi	r18, 0x10	; 16
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <vfprintf+0x264>
 9cc:	20 e1       	ldi	r18, 0x10	; 16
 9ce:	32 e0       	ldi	r19, 0x02	; 2
 9d0:	f8 01       	movw	r30, r16
 9d2:	b7 fe       	sbrs	r11, 7
 9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <vfprintf+0x278>
 9d6:	60 81       	ld	r22, Z
 9d8:	71 81       	ldd	r23, Z+1	; 0x01
 9da:	82 81       	ldd	r24, Z+2	; 0x02
 9dc:	93 81       	ldd	r25, Z+3	; 0x03
 9de:	0c 5f       	subi	r16, 0xFC	; 252
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <vfprintf+0x284>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	a4 01       	movw	r20, r8
 9f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__ultoa_invert>
 9f6:	a8 2e       	mov	r10, r24
 9f8:	a8 18       	sub	r10, r8
 9fa:	fb 2d       	mov	r31, r11
 9fc:	ff 77       	andi	r31, 0x7F	; 127
 9fe:	7f 2e       	mov	r7, r31
 a00:	76 fe       	sbrs	r7, 6
 a02:	0b c0       	rjmp	.+22     	; 0xa1a <vfprintf+0x2ae>
 a04:	37 2d       	mov	r19, r7
 a06:	3e 7f       	andi	r19, 0xFE	; 254
 a08:	a5 14       	cp	r10, r5
 a0a:	50 f4       	brcc	.+20     	; 0xa20 <vfprintf+0x2b4>
 a0c:	74 fe       	sbrs	r7, 4
 a0e:	0a c0       	rjmp	.+20     	; 0xa24 <vfprintf+0x2b8>
 a10:	72 fc       	sbrc	r7, 2
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <vfprintf+0x2b8>
 a14:	37 2d       	mov	r19, r7
 a16:	3e 7e       	andi	r19, 0xEE	; 238
 a18:	05 c0       	rjmp	.+10     	; 0xa24 <vfprintf+0x2b8>
 a1a:	ba 2c       	mov	r11, r10
 a1c:	37 2d       	mov	r19, r7
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <vfprintf+0x2ba>
 a20:	ba 2c       	mov	r11, r10
 a22:	01 c0       	rjmp	.+2      	; 0xa26 <vfprintf+0x2ba>
 a24:	b5 2c       	mov	r11, r5
 a26:	34 ff       	sbrs	r19, 4
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <vfprintf+0x2d8>
 a2a:	fe 01       	movw	r30, r28
 a2c:	ea 0d       	add	r30, r10
 a2e:	f1 1d       	adc	r31, r1
 a30:	80 81       	ld	r24, Z
 a32:	80 33       	cpi	r24, 0x30	; 48
 a34:	11 f4       	brne	.+4      	; 0xa3a <vfprintf+0x2ce>
 a36:	39 7e       	andi	r19, 0xE9	; 233
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <vfprintf+0x2e0>
 a3a:	32 ff       	sbrs	r19, 2
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <vfprintf+0x2de>
 a3e:	b3 94       	inc	r11
 a40:	b3 94       	inc	r11
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <vfprintf+0x2e0>
 a44:	83 2f       	mov	r24, r19
 a46:	86 78       	andi	r24, 0x86	; 134
 a48:	09 f0       	breq	.+2      	; 0xa4c <vfprintf+0x2e0>
 a4a:	b3 94       	inc	r11
 a4c:	33 fd       	sbrc	r19, 3
 a4e:	13 c0       	rjmp	.+38     	; 0xa76 <vfprintf+0x30a>
 a50:	30 ff       	sbrs	r19, 0
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <vfprintf+0x2f4>
 a54:	5a 2c       	mov	r5, r10
 a56:	b3 14       	cp	r11, r3
 a58:	18 f4       	brcc	.+6      	; 0xa60 <vfprintf+0x2f4>
 a5a:	53 0c       	add	r5, r3
 a5c:	5b 18       	sub	r5, r11
 a5e:	b3 2c       	mov	r11, r3
 a60:	b3 14       	cp	r11, r3
 a62:	68 f4       	brcc	.+26     	; 0xa7e <vfprintf+0x312>
 a64:	b7 01       	movw	r22, r14
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	3c 87       	std	Y+12, r19	; 0x0c
 a6c:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 a70:	b3 94       	inc	r11
 a72:	3c 85       	ldd	r19, Y+12	; 0x0c
 a74:	f5 cf       	rjmp	.-22     	; 0xa60 <vfprintf+0x2f4>
 a76:	b3 14       	cp	r11, r3
 a78:	10 f4       	brcc	.+4      	; 0xa7e <vfprintf+0x312>
 a7a:	3b 18       	sub	r3, r11
 a7c:	01 c0       	rjmp	.+2      	; 0xa80 <vfprintf+0x314>
 a7e:	31 2c       	mov	r3, r1
 a80:	34 ff       	sbrs	r19, 4
 a82:	12 c0       	rjmp	.+36     	; 0xaa8 <vfprintf+0x33c>
 a84:	b7 01       	movw	r22, r14
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	3c 87       	std	Y+12, r19	; 0x0c
 a8c:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 a90:	3c 85       	ldd	r19, Y+12	; 0x0c
 a92:	32 ff       	sbrs	r19, 2
 a94:	17 c0       	rjmp	.+46     	; 0xac4 <vfprintf+0x358>
 a96:	31 fd       	sbrc	r19, 1
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <vfprintf+0x334>
 a9a:	88 e7       	ldi	r24, 0x78	; 120
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <vfprintf+0x338>
 aa0:	88 e5       	ldi	r24, 0x58	; 88
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	b7 01       	movw	r22, r14
 aa6:	0c c0       	rjmp	.+24     	; 0xac0 <vfprintf+0x354>
 aa8:	83 2f       	mov	r24, r19
 aaa:	86 78       	andi	r24, 0x86	; 134
 aac:	59 f0       	breq	.+22     	; 0xac4 <vfprintf+0x358>
 aae:	31 ff       	sbrs	r19, 1
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <vfprintf+0x34a>
 ab2:	8b e2       	ldi	r24, 0x2B	; 43
 ab4:	01 c0       	rjmp	.+2      	; 0xab8 <vfprintf+0x34c>
 ab6:	80 e2       	ldi	r24, 0x20	; 32
 ab8:	37 fd       	sbrc	r19, 7
 aba:	8d e2       	ldi	r24, 0x2D	; 45
 abc:	b7 01       	movw	r22, r14
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ac4:	a5 14       	cp	r10, r5
 ac6:	38 f4       	brcc	.+14     	; 0xad6 <vfprintf+0x36a>
 ac8:	b7 01       	movw	r22, r14
 aca:	80 e3       	ldi	r24, 0x30	; 48
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ad2:	5a 94       	dec	r5
 ad4:	f7 cf       	rjmp	.-18     	; 0xac4 <vfprintf+0x358>
 ad6:	aa 94       	dec	r10
 ad8:	f4 01       	movw	r30, r8
 ada:	ea 0d       	add	r30, r10
 adc:	f1 1d       	adc	r31, r1
 ade:	80 81       	ld	r24, Z
 ae0:	b7 01       	movw	r22, r14
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ae8:	a1 10       	cpse	r10, r1
 aea:	f5 cf       	rjmp	.-22     	; 0xad6 <vfprintf+0x36a>
 aec:	33 20       	and	r3, r3
 aee:	09 f4       	brne	.+2      	; 0xaf2 <vfprintf+0x386>
 af0:	4f ce       	rjmp	.-866    	; 0x790 <vfprintf+0x24>
 af2:	b7 01       	movw	r22, r14
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 afc:	3a 94       	dec	r3
 afe:	f6 cf       	rjmp	.-20     	; 0xaec <vfprintf+0x380>
 b00:	f7 01       	movw	r30, r14
 b02:	86 81       	ldd	r24, Z+6	; 0x06
 b04:	97 81       	ldd	r25, Z+7	; 0x07
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0x3a0>
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	9f ef       	ldi	r25, 0xFF	; 255
 b0c:	2c 96       	adiw	r28, 0x0c	; 12
 b0e:	e2 e1       	ldi	r30, 0x12	; 18
 b10:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__epilogue_restores__>

00000b14 <strnlen_P>:
 b14:	fc 01       	movw	r30, r24
 b16:	05 90       	lpm	r0, Z+
 b18:	61 50       	subi	r22, 0x01	; 1
 b1a:	70 40       	sbci	r23, 0x00	; 0
 b1c:	01 10       	cpse	r0, r1
 b1e:	d8 f7       	brcc	.-10     	; 0xb16 <strnlen_P+0x2>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	8e 0f       	add	r24, r30
 b26:	9f 1f       	adc	r25, r31
 b28:	08 95       	ret

00000b2a <strnlen>:
 b2a:	fc 01       	movw	r30, r24
 b2c:	61 50       	subi	r22, 0x01	; 1
 b2e:	70 40       	sbci	r23, 0x00	; 0
 b30:	01 90       	ld	r0, Z+
 b32:	01 10       	cpse	r0, r1
 b34:	d8 f7       	brcc	.-10     	; 0xb2c <strnlen+0x2>
 b36:	80 95       	com	r24
 b38:	90 95       	com	r25
 b3a:	8e 0f       	add	r24, r30
 b3c:	9f 1f       	adc	r25, r31
 b3e:	08 95       	ret

00000b40 <fputc>:
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	fb 01       	movw	r30, r22
 b4a:	23 81       	ldd	r18, Z+3	; 0x03
 b4c:	21 fd       	sbrc	r18, 1
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <fputc+0x16>
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	9f ef       	ldi	r25, 0xFF	; 255
 b54:	28 c0       	rjmp	.+80     	; 0xba6 <fputc+0x66>
 b56:	22 ff       	sbrs	r18, 2
 b58:	16 c0       	rjmp	.+44     	; 0xb86 <fputc+0x46>
 b5a:	46 81       	ldd	r20, Z+6	; 0x06
 b5c:	57 81       	ldd	r21, Z+7	; 0x07
 b5e:	24 81       	ldd	r18, Z+4	; 0x04
 b60:	35 81       	ldd	r19, Z+5	; 0x05
 b62:	42 17       	cp	r20, r18
 b64:	53 07       	cpc	r21, r19
 b66:	44 f4       	brge	.+16     	; 0xb78 <fputc+0x38>
 b68:	a0 81       	ld	r26, Z
 b6a:	b1 81       	ldd	r27, Z+1	; 0x01
 b6c:	9d 01       	movw	r18, r26
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	31 83       	std	Z+1, r19	; 0x01
 b74:	20 83       	st	Z, r18
 b76:	8c 93       	st	X, r24
 b78:	26 81       	ldd	r18, Z+6	; 0x06
 b7a:	37 81       	ldd	r19, Z+7	; 0x07
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	37 83       	std	Z+7, r19	; 0x07
 b82:	26 83       	std	Z+6, r18	; 0x06
 b84:	10 c0       	rjmp	.+32     	; 0xba6 <fputc+0x66>
 b86:	eb 01       	movw	r28, r22
 b88:	09 2f       	mov	r16, r25
 b8a:	18 2f       	mov	r17, r24
 b8c:	00 84       	ldd	r0, Z+8	; 0x08
 b8e:	f1 85       	ldd	r31, Z+9	; 0x09
 b90:	e0 2d       	mov	r30, r0
 b92:	09 95       	icall
 b94:	89 2b       	or	r24, r25
 b96:	e1 f6       	brne	.-72     	; 0xb50 <fputc+0x10>
 b98:	8e 81       	ldd	r24, Y+6	; 0x06
 b9a:	9f 81       	ldd	r25, Y+7	; 0x07
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	9f 83       	std	Y+7, r25	; 0x07
 ba0:	8e 83       	std	Y+6, r24	; 0x06
 ba2:	81 2f       	mov	r24, r17
 ba4:	90 2f       	mov	r25, r16
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	08 95       	ret

00000bb0 <__ultoa_invert>:
 bb0:	fa 01       	movw	r30, r20
 bb2:	aa 27       	eor	r26, r26
 bb4:	28 30       	cpi	r18, 0x08	; 8
 bb6:	61 f1       	breq	.+88     	; 0xc10 <__ultoa_invert+0x60>
 bb8:	20 31       	cpi	r18, 0x10	; 16
 bba:	91 f1       	breq	.+100    	; 0xc20 <__ultoa_invert+0x70>
 bbc:	e8 94       	clt
 bbe:	6f 93       	push	r22
 bc0:	6e 7f       	andi	r22, 0xFE	; 254
 bc2:	6e 5f       	subi	r22, 0xFE	; 254
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	af 4f       	sbci	r26, 0xFF	; 255
 bcc:	b1 e0       	ldi	r27, 0x01	; 1
 bce:	40 d0       	rcall	.+128    	; 0xc50 <__ultoa_invert+0xa0>
 bd0:	b4 e0       	ldi	r27, 0x04	; 4
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0xa0>
 bd4:	67 0f       	add	r22, r23
 bd6:	78 1f       	adc	r23, r24
 bd8:	89 1f       	adc	r24, r25
 bda:	9a 1f       	adc	r25, r26
 bdc:	a1 1d       	adc	r26, r1
 bde:	68 0f       	add	r22, r24
 be0:	79 1f       	adc	r23, r25
 be2:	8a 1f       	adc	r24, r26
 be4:	91 1d       	adc	r25, r1
 be6:	a1 1d       	adc	r26, r1
 be8:	6a 0f       	add	r22, r26
 bea:	71 1d       	adc	r23, r1
 bec:	81 1d       	adc	r24, r1
 bee:	91 1d       	adc	r25, r1
 bf0:	a1 1d       	adc	r26, r1
 bf2:	22 d0       	rcall	.+68     	; 0xc38 <__ultoa_invert+0x88>
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <__ultoa_invert+0x48>
 bf6:	68 94       	set
 bf8:	3f 91       	pop	r19
 bfa:	06 2e       	mov	r0, r22
 bfc:	00 0c       	add	r0, r0
 bfe:	30 19       	sub	r19, r0
 c00:	00 0c       	add	r0, r0
 c02:	00 0c       	add	r0, r0
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	ce f6       	brtc	.-78     	; 0xbbe <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x8a>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x60>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x5c>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x80>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x88>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x70>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x5c>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x8a>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa6>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <__mulqi3>:
 c70:	00 24       	eor	r0, r0

00000c72 <__mulqi3_loop>:
 c72:	80 fd       	sbrc	r24, 0
 c74:	06 0e       	add	r0, r22
 c76:	66 0f       	add	r22, r22
 c78:	11 f0       	breq	.+4      	; 0xc7e <__mulqi3_exit>
 c7a:	86 95       	lsr	r24
 c7c:	d1 f7       	brne	.-12     	; 0xc72 <__mulqi3_loop>

00000c7e <__mulqi3_exit>:
 c7e:	80 2d       	mov	r24, r0
 c80:	08 95       	ret

00000c82 <__prologue_saves__>:
 c82:	2f 92       	push	r2
 c84:	3f 92       	push	r3
 c86:	4f 92       	push	r4
 c88:	5f 92       	push	r5
 c8a:	6f 92       	push	r6
 c8c:	7f 92       	push	r7
 c8e:	8f 92       	push	r8
 c90:	9f 92       	push	r9
 c92:	af 92       	push	r10
 c94:	bf 92       	push	r11
 c96:	cf 92       	push	r12
 c98:	df 92       	push	r13
 c9a:	ef 92       	push	r14
 c9c:	ff 92       	push	r15
 c9e:	0f 93       	push	r16
 ca0:	1f 93       	push	r17
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
 caa:	ca 1b       	sub	r28, r26
 cac:	db 0b       	sbc	r29, r27
 cae:	0f b6       	in	r0, 0x3f	; 63
 cb0:	f8 94       	cli
 cb2:	de bf       	out	0x3e, r29	; 62
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	cd bf       	out	0x3d, r28	; 61
 cb8:	09 94       	ijmp

00000cba <__epilogue_restores__>:
 cba:	2a 88       	ldd	r2, Y+18	; 0x12
 cbc:	39 88       	ldd	r3, Y+17	; 0x11
 cbe:	48 88       	ldd	r4, Y+16	; 0x10
 cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 cca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ccc:	b9 84       	ldd	r11, Y+9	; 0x09
 cce:	c8 84       	ldd	r12, Y+8	; 0x08
 cd0:	df 80       	ldd	r13, Y+7	; 0x07
 cd2:	ee 80       	ldd	r14, Y+6	; 0x06
 cd4:	fd 80       	ldd	r15, Y+5	; 0x05
 cd6:	0c 81       	ldd	r16, Y+4	; 0x04
 cd8:	1b 81       	ldd	r17, Y+3	; 0x03
 cda:	aa 81       	ldd	r26, Y+2	; 0x02
 cdc:	b9 81       	ldd	r27, Y+1	; 0x01
 cde:	ce 0f       	add	r28, r30
 ce0:	d1 1d       	adc	r29, r1
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	f8 94       	cli
 ce6:	de bf       	out	0x3e, r29	; 62
 ce8:	0f be       	out	0x3f, r0	; 63
 cea:	cd bf       	out	0x3d, r28	; 61
 cec:	ed 01       	movw	r28, r26
 cee:	08 95       	ret

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
